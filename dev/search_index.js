var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SimulatedAnnealingABC","category":"page"},{"location":"#SimulatedAnnealingABC","page":"Home","title":"SimulatedAnnealingABC","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SimulatedAnnealingABC.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SimulatedAnnealingABC]","category":"page"},{"location":"#SimulatedAnnealingABC.SABCresult","page":"Home","title":"SimulatedAnnealingABC.SABCresult","text":"Holds results\n\npopulation: vector of parameter samples from the approximate posterior\nu: transformed distances\nρ: distances\nstate: state of algorithm\n\n\n\n\n\n","category":"type"},{"location":"#SimulatedAnnealingABC.SABCstate","page":"Home","title":"SimulatedAnnealingABC.SABCstate","text":"Holds state of algorithm\n\n\n\n\n\n","category":"type"},{"location":"#Base.show-Tuple{IO, SimulatedAnnealingABC.SABCresult}","page":"Home","title":"Base.show","text":"Function for pretty printing\n\n\n\n\n\n","category":"method"},{"location":"#SimulatedAnnealingABC.build_cdf-Tuple{AbstractVector}","page":"Home","title":"SimulatedAnnealingABC.build_cdf","text":"Estimate the empirical cdf of data x smoothed by interpolation.\n\nReturns a function.\n\n\n\n\n\n","category":"method"},{"location":"#SimulatedAnnealingABC.build_cdf-Tuple{Matrix}","page":"Home","title":"SimulatedAnnealingABC.build_cdf","text":"Construct the empirical cdf for each summary statistics\n\nIt assumes every row x corresponds to a sample.\n\nReturns a function, that applies the corresponding cdf to each statistics.\n\n\n\n\n\n","category":"method"},{"location":"#SimulatedAnnealingABC.estimate_jump_covariance-Tuple{Any, Any}","page":"Home","title":"SimulatedAnnealingABC.estimate_jump_covariance","text":"Estimate the covariance for the jump distributions from a population\n\n\n\n\n\n","category":"method"},{"location":"#SimulatedAnnealingABC.initialization-Tuple{Any, Distributions.Distribution, Vararg{Any}}","page":"Home","title":"SimulatedAnnealingABC.initialization","text":"Initialisation step\n\nArguments\n\nSee docs for sabc\n\nReturn\n\nAn object of type SABCresult\n\n\n\n\n\n","category":"method"},{"location":"#SimulatedAnnealingABC.proposal-Tuple{Any, AbstractArray}","page":"Home","title":"SimulatedAnnealingABC.proposal","text":"Proposal for n-dimensions, n > 1\n\n\n\n\n\n","category":"method"},{"location":"#SimulatedAnnealingABC.proposal-Tuple{Any, Float64}","page":"Home","title":"SimulatedAnnealingABC.proposal","text":"Proposal for 1-dimension\n\n\n\n\n\n","category":"method"},{"location":"#SimulatedAnnealingABC.resample_population-Tuple{Any, Any, Any}","page":"Home","title":"SimulatedAnnealingABC.resample_population","text":"Resample population\n\n\n\n\n\n","category":"method"},{"location":"#SimulatedAnnealingABC.sabc-Tuple{Function, Distributions.Distribution, Vararg{Any}}","page":"Home","title":"SimulatedAnnealingABC.sabc","text":"sabc(f_dist::Function, prior::Distribution, args...;\n      n_particles = 100, n_simulation = 10_000,\n      type = :single,\n      resample = 2*n_particles,\n      v=1.0, β=0.8, δ=0.1,\n      checkpoint_history = 1,\n      show_progressbar::Bool = !is_logging(stderr),\n      show_checkpoint = is_logging(stderr) ? 100 : Inf,\n      kwargs...)\n\nSimulated Annealing Approximate Bayesian Inference Algorithm\n\nArguments\n\nf_dist: Function that one or more distances between data and a random sample from the likelihood. The first argument must be the parameter vector.\nprior: A Distribution defining the prior.\nargs...: Further arguments passed to f_dist\nn_particles: Desired number of particles.\nn_simulation: maximal number of simulations from f_dist.\nv = 1.0: Tuning parameter for XXX\nβ = 0.8: Tuning parameter for XXX\nδ = 0.1: Tuning parameter for XXX\ntype = :single -> single-ϵ        = :multi  -> multi-ϵ        = :hybrid -> hybrid multi-u-single-ϵ\nresample: After how many accepted population updates?\ncheckpoint_history = 1: every how many population updates distances and epsilons are stored\nshow_progressbar::Bool = !is_logging(stderr): defaults to true for interactive use.\nshow_checkpoint::Int = 100: every how many population updates algorithm state is displayed.                               By default disabled for for interactive use.\nkwargs...: Further arguments passed to f_dist`\n\nReturn\n\nAn object of type SABCresult\n\n\n\n\n\n","category":"method"},{"location":"#SimulatedAnnealingABC.update_epsilon-NTuple{4, Any}","page":"Home","title":"SimulatedAnnealingABC.update_epsilon","text":"Update ϵ Single-epsilon: see eq(31) in Albert et al., Statistics and Computing 25, 2015 Multi-epsilon:  new update rule\n\n\n\n\n\n","category":"method"}]
}
