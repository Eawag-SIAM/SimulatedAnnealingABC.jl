var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SimulatedAnnealingABC","category":"page"},{"location":"#SimulatedAnnealingABC","page":"Home","title":"SimulatedAnnealingABC","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SimulatedAnnealingABC.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides different SimulatedAnnealingABC (SABC) algorithms for Approximate Bayesian Computation (ABC) (sometimes also called simulation-based inference or likelihood-free inference).","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nIf you are able to compute the density of your posterior, you should most likely not be using this or another ABC package!  A traditional MCMC algorithm will be much more efficient.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Demonstrate how to use sabc and update_population! with a minimal example.","category":"page"},{"location":"#logging-and-progress-bar","page":"Home","title":"logging and progress bar","text":"","category":"section"},{"location":"#how-to-disable-multi-threading","page":"Home","title":"how to disable multi-threading","text":"","category":"section"},{"location":"#Worked-example","page":"Home","title":"Worked example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Translate and update example from readme.","category":"page"},{"location":"","page":"Home","title":"Home","text":"explain pro and cons of the different algo types.","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"sabc","category":"page"},{"location":"#SimulatedAnnealingABC.sabc","page":"Home","title":"SimulatedAnnealingABC.sabc","text":"sabc(f_dist::Function, prior::Distribution, args...;\n      n_particles = 100, n_simulation = 10_000,\n      type = :single,\n      resample = 2*n_particles,\n      v=1.0, β=0.8, δ=0.1,\n      checkpoint_history = 1,\n      show_progressbar::Bool = !is_logging(stderr),\n      show_checkpoint = is_logging(stderr) ? 100 : Inf,\n      kwargs...)\n\nSimulated Annealing Approximate Bayesian Inference Algorithm\n\nArguments\n\nf_dist: Function that one or more distances between data and a random sample from the likelihood. The first argument must be the parameter vector.\nprior: A Distribution defining the prior.\nargs...: Further arguments passed to f_dist\nn_particles: Desired number of particles.\nn_simulation: maximal number of simulations from f_dist.\nv = 1.0: Tuning parameter for XXX\nβ = 0.8: Tuning parameter for XXX\nδ = 0.1: Tuning parameter for XXX\ntype = :single: Choose algorithm, either :single ,:multi, or :hybrid\nresample: After how many accepted population updates?\ncheckpoint_history = 1: every how many population updates distances and epsilons are stored\nshow_progressbar::Bool = !is_logging(stderr): defaults to true for interactive use.\nshow_checkpoint::Int = 100: every how many population updates algorithm state is displayed.                               By default disabled for for interactive use.\nkwargs...: Further arguments passed to f_dist`\n\nReturn\n\nAn object of type SABCresult\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"update_population!","category":"page"},{"location":"#SimulatedAnnealingABC.update_population!","page":"Home","title":"SimulatedAnnealingABC.update_population!","text":"update_population!(population_state::SABCresult,\n                   f_dist, prior, args...;\n                   n_simulation,\n                   v=1.0, β=0.8, δ=0.1,\n                   resample = 2*length(population_state.population),\n                   checkpoint_history = 1,\n                   show_progressbar::Bool = !is_logging(stderr),\n                   show_checkpoint = is_logging(stderr) ? 100 : Inf,\n                   kwargs...)\n\nUpdates particles with n_simulation and applies importance sampling if needed. Modifies population_state.\n\nArguments\n\nSee docstring for sabc.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"SABCresult","category":"page"},{"location":"#SimulatedAnnealingABC.SABCresult","page":"Home","title":"SimulatedAnnealingABC.SABCresult","text":"Holds results from a SABC run with fields:\n\npopulation: vector of parameter samples from the approximate posterior\nu: transformed distances\nρ: distances\nstate: state of algorithm\n\nThe history of ϵ can be accessed with the field state.ϵ_history.\n\n\n\n\n\n","category":"type"},{"location":"#Related-Julia-Packages","page":"Home","title":"Related Julia Packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"todo","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Albert, C., Künsch, H.R., Scheidegger, A., 2015. A simulated annealing approach to approximate Bayes computations. Statistics and computing 25, 1217–1232. https://doi.org/10.1007/s11222-014-9507-8","category":"page"}]
}
